The build and test structure (BATS) is controlled through command line
options to the ``build_and_test.py`` script. All of
``./build_and_test.py``'s options are *optional* and have default
values. The full set of options that may be passed, and their defaults,
are:

.. code:: sh


      -h, --help            show the help message and exit.

      -p PLATFORM, --platform PLATFORM
                            Your computer platform. 
                            (default: linux)
      
      -c COMPILER, --compiler COMPILER
                            The compiler. 
                            (default: gnu)
      
      -i CISM_DIR, --cism-dir CISM_DIR
                            Location of the CISM source code. 
                            (default: ../..)
      
      -b BUILD_DIR, --build-dir BUILD_DIR
                            Location to build CISM. 
                            (default: ./build)

      -j J                  Number of processors to use when making CISM. 
                            (default: 8)
      
      -s, --skip-build      Skip build, and look for the CISM driver in:
                                BUILD_DIR/cism_driver/cism_driver
                            (default: False)

      -o OUT_DIR, --out-dir OUT_DIR
                            Location of the directoy to output the test data.
                            (default: reg_test)

      -f, --force           Suppress any warning about possibly overwriting test data.
                            (default: False)
      
      --timing              Run the timing test. This is needed for creating a new
                            benchmark dataset. Selecting this option will force the
                            --performance option to true as well. 
                            (default: False)
      
      --performance         Run the performance tests. 
                            (default: False -- unless timing option is specified or 
                                               HPC system is detected, then will be 
                                               forced to true always)

      --sleep SLEEP         Number of seconds to sleep between checks on running
                            tests. Only used on personal machines, when HPC systems 
                            are detected, BATS does not run the tests and just creates 
                            the batch jobs.
                            (default: 30)

Platform and compiler
^^^^^^^^^^^^^^^^^^^^^

The ``-p``/``--platform`` option and the ``-c``/``--compiler`` option
are used extensively throughout BATS and *should always be set
appropriately.*

The platform option will determine if you are running on an high
performance computer (HPC) or a personal computer (PC). On HPCs, bats
sets up the tests and creates job scripts, while on PCs, BATS will
directly run the tests. Additionally, if an HPC platform is selected,
BATS will automatically turn on the ``--performance`` option (discussed
below).

Additionally, the values passed to the platform and compiler options are
used in combination to locate the appropriate build script and determine
the name of the output sub-directory. Within the CISM source code
(specified by ``-i``/``--cism-dir``), the scripts to set the CMake build
variables is located at
``builds/PLATFORM-COMPILER/PLATFORM-COMPILER-cmake.bash`` (note: BATS
uses the bash scripts to perform an `out-of-source
build <CISM-out-of-source-builds>`__). If either the platform or
compiler option is set incorrectly, BATS may try to build CISM
incorrectly, or be unable to locate the build script (if BATS is
building CISM -- more build info below).

Within the specified output directory (``-o/--out-dir``) BATS creates a
subdirectory called ``PLATFORM-COMPILER/`` which contains all the
regression testing data for LIVVkit. The creation of this subdirectory,
and the use of out of source builds, allows many different compilers to
be tested and all the data from these different sets of regression tests
to live within the same output directory (default: ``reg_test/``).

Locating the CISM source
^^^^^^^^^^^^^^^^^^^^^^^^

The ``-i``/``--cism-dir`` option allows you to point to a different CISM
location than the one ``build_and_test.py`` is located in (defaults to
parent source code). BATS will look for the build scripts, and
individual run files within this location.

*Note: This option is only needed if you've moved the entirety of BATS
out of the CISM source and are trying to run it externally.*

Controlling the CISM build
^^^^^^^^^^^^^^^^^^^^^^^^^^

BATS will build CISM into any directory specified by the
``-b``/``--build-dir`` option using the build script
``builds/PLATFORM-COMPILER/PLATFORM-COMPILER-cmake.bash`` (note: BATS
uses this script to perform an `out-of-source
build <CISM-out-of-source-builds>`__). BATS will use the number of jobs
specified by the ``-j`` option when building CISM (equivalent to
``make``'s ``-j`` option).

In some use cases, you may build CISM manually or you may already have a
version of CISM built which you would like to use when running the
tests. By specifying the ``s``/``--skip-build`` option, BATS will not
build CISM, but instead look for a CISM driver in the
``BUILD_DIR/cism_driver/`` directory (e.g., the `developer's
workflow <Workflow-developer>`__).

BATS output data
^^^^^^^^^^^^^^^^

BATS will output all the regression tests data to a
``PLATFORM-COMPILER`` subdirectory within the directory specified by
``-o``/``--out-dir``. BATS will make sure no data currently exists
within that *subdirectory* and will throw an error if data does exist
within it. However, you can force BATS to ignore, and overwrite,
pre-existing data with the ``-f``/``--force`` option.

See the `regression tests data <BATS-reg-test>`__ page for a description
of the output data.

Running the tests
^^^^^^^^^^^^^^^^^

BATS will always run a default set of regression tests. The
``--performance`` and ``--timing`` options both specify more tests to
run.

``--performance`` will run all the performance tests specified in the
BATS module located at ``util/dicts.py`` (from the location of
``build_and_test.py``). On HPCs, BATS will run the additional
performance tests contained within the ``*_perf_small`` dictionaries
(``*`` is the regular expression's expansion) and the ``perf_dict``
dictionary (contains the large performance tests, where large means
tests that use more than 16 processing cores). On PCs, BATS will only
run the small performance tests. (Note, this option is forced on for
HPCs.)

The ``--timing`` option will run each of the above mentioned performance
tests an additional 10 times in order to get the variance in the
performance metrics (primarily run time). To create a new benchmark,
this option should be used. (This option will also ensure the
``--performance`` option is on.)

Additionally, on PCs, BATS will automatically start running all the
specified tests as subprocesses. BATS will then sleep for a number of
sections specified by the ``--sleep`` option while the subprocesses are
running. After the sleep time has elapsed, BATS will check on the
subprocesses and if any are still running, sleep again. For the default
test cases, the default sleep value should be adequate. If the
``--performance`` or ``--timing`` option has been specified, you may
want to increase the sleep time to prevent an excessive amount of print
statements being generated from the large number of subprocess checks.
