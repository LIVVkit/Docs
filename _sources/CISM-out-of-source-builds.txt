As documented in the
`CISM <http://oceans11.lanl.gov/cism/documentation.html>`__ users
manual, CISM uses c-shell (``csh``) style scripts to set the environment
variable needed by CMake. These scripts need to be run from with the
``$CISM/builds/PLATFORM-COMPILER/`` directory, where ``$CISM`` is an
environment variable holding the location of the CISM source,
``PLATFORM`` is your computing platform (e.g., ``titan`` or ``linux``),
and ``COMPILER`` is the compiler you desire to build CISM with (e.g.,
``pci`` or ``gnu``). These scripts then created all the make files to
build CISM within that directory. This, however, doesn't allow for
multiple builds of the same ``PLATFORM-COMPILER`` combination to coexist
-- say for two different 'versions' of CISM (two different commits).

Because it's often desirable to test changes across two different
commits with LIVVkit, some ``bash`` scripts have been added into select
``$CISM/builds/PLATFORM-COMPILER/`` directories which support
out-of-source builds. These scripts take one option -- the location of
the CISM source. The make files will then be created into your current
working directory. For example, if you wanted to build CISM manually
into a new directory ``$CISM/build_here/`` on ``titan`` using the
``gnu`` compiler, you would do:

.. code:: sh

    mkdir $CISM/build_here
    cd $CISM/build_here
    source ../builds/PLATFORM-COMPILER/PLATFORM-COMPILER-cmake.bash $CISM
    make -j 8

Note: these bash files will also work from within the
``$CISM/builds/PLATFORM-COMPILER`` directories, just like the ``csh``
version do, because they will default to ``../..`` as location of the
CISM source is no option is provided.

Currently, not all ``PLATFORM-COMPILER`` combinations that exist within
CISM have ``*-cmake.bash`` scripts, but they are simple to make.

Creating ``*-cmake.bash`` scripts
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To make a ``*-cmake.bash`` script for ``PLATFORM-COMPILER`` combination
that is missing one, first create an empty executable file called
``PLATFORM-COMPILER-cmake.bash`` in the
``$CISM/builds/PLATFORM-COMPILER`` directory, then open it with your
preferred editor:

.. code:: sh

    cd $CISM/builds/PLATFORM-COMPILER/
    touch PLATFORM-COMPILER-cmake.bash
    chmod +x PLATFORM-COMPILER-cmake.bash
    vim PLATFORM-COMPILER-cmake.bash

Then, past these lines into the file:

.. code:: bash

    #!/usr/bin/env bash

    # After this executes, do:
    #   make -j 8

    # Set path to top cism directory
    # Note, this is an easy way to build out of source.
    # In directory you want to build in, run:
    #   $ source $CISM/builds/linux-gnu-cism/linux-gnu-cism-cmake $CISM
    # where $CISM is the path to the top level cism directory.
    if [ $# -eq 0 ]
    then
        cism_top="../.." 
    else
        cism_top=${1}
    fi

    echo CISM: ${cism_top}

These lines allow you to set the location of the CISM source code from
an input variable. Next, open the ``csh`` version of the build script
for your ``PLATFORM-COMPILER`` combination and copy in all ``setenv``
statements to your ``bash`` script.

.. code:: csh

    setenv VAR VALUE

Change all of these statements to the correct ``bash`` syntax:

.. code:: bash

    export VAR=VALUE

Next, if you are on an platform the uses modules, copy all the module
statements from the ``csh`` version into the ``bash`` version. For
``titan-gnu``, this looked like:

.. code:: bash

    source $MODULESHOME/init/bash

    module unload cmake
    module unload hdf5 cray-hdf5 
    module unload cray-hdf5-parallel
    module unload netcdf
    module unload python
    module unload cray-shmem
    module unload cray-mpich cray-mpich2
    module unload netcdf-hdf5parallel cray-netcdf-hdf5parallel cray-parallel-netcdf cray-hdf5-parallel
    module unload boost 
    module unload gcc
    module unload PrgEnv-cray PrgEnv-gnu PrgEnv-intel PrgEnv-pathscale PrgEnv-pgi

    module load modules
    module load cmake/2.8.11.2
    module load PrgEnv-gnu/5.2.40
    module unload gcc
    module load cray-shmem
    module load cray-mpich
    module load gcc/4.8.2
    module load cray-hdf5-parallel/1.8.13
    module load cray-netcdf-hdf5parallel/4.3.2
    module load python
    module load boost/1.57.0

    echo module list

This should not need to be edited. Next, copy these into the ``bash``
script to remove any existing CMake files in the directory you'll be
building into:

.. code:: bash

    # remove old build data:
    rm -f ./CMakeCache.txt
    rm -rf ./CMakeFiles

Now, copy the entire cmake command from the ``csh`` script into the
``bash`` script. On ``titan-gnu`` this looked like:

.. code:: csh

    cmake \
      -D CISM_BUILD_CISM_DRIVER:BOOL=ON \
      -D CISM_ENABLE_BISICLES=OFF \
      -D CISM_ENABLE_FELIX=OFF \
    \
      -D CISM_USE_TRILINOS:BOOL=ON \
      -D CISM_MPI_MODE:BOOL=ON \
      -D CISM_SERIAL_MODE:BOOL=OFF \
    \
      -D CISM_USE_GPTL_INSTRUMENTATION:BOOL=ON \
      -D CISM_COUPLED:BOOL=OFF \
    \
      -D CISM_TRILINOS_DIR=/lustre/atlas/world-shared/cli900/cesm/software/Trilinos/Trilinos-11.10.2_gptl/titan-gnu-ci-nophal/install \
      -D CISM_TRILINOS_GPTL_DIR=/lustre/atlas/world-shared/cli900/cesm/software/Trilinos/Trilinos-11.10.2_gptl/titan-gnu-ci-nophal/install \
      -D CISM_TRILINOS_ALBANY_DIR=/lustre/atlas/world-shared/cli900/cesm/software/Trilinos/Trilinos-11.10.2_gptl/titan-gnu-ci-nophal/install \
    \
      -D CISM_GPTL_DIR=/lustre/atlas/world-shared/cli900/cesm/software/libgptl/libgptl-titan-gnu \
      -D CISM_NETCDF_DIR=/opt/cray/netcdf-hdf5parallel/4.3.0/GNU/48 \
    \
      -D CMAKE_INSTALL_PREFIX:PATH=$PWD/install \
      -D CMAKE_VERBOSE_MAKEFILE:BOOL=ON \
      -D CMAKE_VERBOSE_CONFIGURE:BOOL=ON \
    \
      -D CMAKE_CXX_COMPILER=CC \
      -D CMAKE_C_COMPILER=cc \
      -D CMAKE_Fortran_COMPILER=ftn \
    \
      -D CMAKE_CXX_FLAGS:STRING="-O2" \
      -D CISM_Fortran_FLAGS:STRING="-O2 -ffree-line-length-none -fno-range-check" \
      -D BISICLES_LIB_SUBDIR=libgnu \
      -D BISICLES_INTERFACE_DIR=$PWD/../../../BISICLES/CISM-interface/interface \
      -D CISM_MPI_LIBS:STRING="mpichf90" \
      -D CISM_USE_CXX_IMPLICIT_LIBS:BOOL=OFF \
      -D CISM_STATIC_LINKING:BOOL=ON \
      ../..

Now, to support out-of-source builds, any relative paths (from your
current working directory -- ``$PWD``) in these lines need to be edited
so that they are relative to the ``$cism_top`` variable created earlier
(from the input location of ``$CISM``). On ``titan-gnu``, these lines:

.. code:: csh

      -D CMAKE_INSTALL_PREFIX:PATH=$PWD/install \
      -D BISICLES_INTERFACE_DIR=$PWD/../../../BISICLES/CISM-interface/interface \
      ../..

Turn into:

.. code:: bash

      -D CMAKE_INSTALL_PREFIX:PATH=$cism_top/builds/titan-gnu/install \
      -D BISICLES_INTERFACE_DIR=$cism_top/../BISICLES/CISM-interface/interface \
      ${cism_top}

That's it, once you save and exit, your bash script will support out of
source builds.

Note: by differencing the ``csh`` and ``bash`` version of a supported
``PLATFORM-COMPILER`` combination, you can quickly see all the necessary
changes to any ``csh`` build script needed.
